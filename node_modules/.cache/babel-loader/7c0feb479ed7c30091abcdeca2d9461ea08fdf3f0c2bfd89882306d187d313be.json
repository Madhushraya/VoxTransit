{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Artyom.js is a voice control, speech recognition and speech synthesis JavaScript library.\r\n *\r\n * @requires {webkitSpeechRecognition && speechSynthesis}\r\n * @license MIT\r\n * @version 1.0.6\r\n * @copyright 2017 Our Code World (www.ourcodeworld.com) All Rights Reserved.\r\n * @author Carlos Delgado (https://github.com/sdkcarlos) and Sema García (https://github.com/semagarcia)\r\n * @see https://sdkcarlos.github.io/sites/artyom.html\r\n * @see http://docs.ourcodeworld.com/projects/artyom-js\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/// <reference path=\"artyom.d.ts\" />\n// Remove \"export default \" keywords if willing to build with `npm run artyom-build-window`\nvar Artyom = function () {\n  // Triggered at the declaration of \n  function Artyom() {\n    this.ArtyomCommands = [];\n    this.ArtyomVoicesIdentifiers = {\n      // German\n      \"de-DE\": [\"Google Deutsch\", \"de-DE\", \"de_DE\"],\n      // Spanish\n      \"es-ES\": [\"Google español\", \"es-ES\", \"es_ES\", \"es-MX\", \"es_MX\"],\n      // Italian\n      \"it-IT\": [\"Google italiano\", \"it-IT\", \"it_IT\"],\n      // Japanese\n      \"jp-JP\": [\"Google 日本人\", \"ja-JP\", \"ja_JP\"],\n      // English USA\n      \"en-US\": [\"Google US English\", \"en-US\", \"en_US\"],\n      // English UK\n      \"en-GB\": [\"Google UK English Male\", \"Google UK English Female\", \"en-GB\", \"en_GB\"],\n      // Brazilian Portuguese\n      \"pt-BR\": [\"Google português do Brasil\", \"pt-PT\", \"pt-BR\", \"pt_PT\", \"pt_BR\"],\n      // Portugal Portuguese\n      // Note: in desktop, there's no voice for portugal Portuguese\n      \"pt-PT\": [\"Google português do Brasil\", \"pt-PT\", \"pt_PT\"],\n      // Russian\n      \"ru-RU\": [\"Google русский\", \"ru-RU\", \"ru_RU\"],\n      // Dutch (holland)\n      \"nl-NL\": [\"Google Nederlands\", \"nl-NL\", \"nl_NL\"],\n      // French\n      \"fr-FR\": [\"Google français\", \"fr-FR\", \"fr_FR\"],\n      // Polish\n      \"pl-PL\": [\"Google polski\", \"pl-PL\", \"pl_PL\"],\n      // Indonesian\n      \"id-ID\": [\"Google Bahasa Indonesia\", \"id-ID\", \"id_ID\"],\n      // Hindi\n      \"hi-IN\": [\"Google हिन्दी\", \"hi-IN\", \"hi_IN\"],\n      // Mandarin Chinese\n      \"zh-CN\": [\"Google 普通话（中国大陆）\", \"zh-CN\", \"zh_CN\"],\n      // Cantonese Chinese\n      \"zh-HK\": [\"Google 粤語（香港）\", \"zh-HK\", \"zh_HK\"],\n      // Native voice\n      \"native\": [\"native\"]\n    };\n    // Important: retrieve the voices of the browser as soon as possible.\n    // Normally, the execution of speechSynthesis.getVoices will return at the first time an empty array.\n    if (window.hasOwnProperty('speechSynthesis')) {\n      speechSynthesis.getVoices();\n    } else {\n      console.error(\"Artyom.js can't speak without the Speech Synthesis API.\");\n    }\n    // This instance of webkitSpeechRecognition is the one used by Artyom.\n    if (window.hasOwnProperty('webkitSpeechRecognition')) {\n      this.ArtyomWebkitSpeechRecognition = new window.webkitSpeechRecognition();\n    } else {\n      console.error(\"Artyom.js can't recognize voice without the Speech Recognition API.\");\n    }\n    this.ArtyomProperties = {\n      lang: 'en-GB',\n      recognizing: false,\n      continuous: false,\n      speed: 1,\n      volume: 1,\n      listen: false,\n      mode: \"normal\",\n      debug: false,\n      helpers: {\n        redirectRecognizedTextOutput: null,\n        remoteProcessorHandler: null,\n        lastSay: null,\n        fatalityPromiseCallback: null\n      },\n      executionKeyword: null,\n      obeyKeyword: null,\n      speaking: false,\n      obeying: true,\n      soundex: false,\n      name: null\n    };\n    this.ArtyomGarbageCollection = [];\n    this.ArtyomFlags = {\n      restartRecognition: false\n    };\n    this.ArtyomGlobalEvents = {\n      ERROR: \"ERROR\",\n      SPEECH_SYNTHESIS_START: \"SPEECH_SYNTHESIS_START\",\n      SPEECH_SYNTHESIS_END: \"SPEECH_SYNTHESIS_END\",\n      TEXT_RECOGNIZED: \"TEXT_RECOGNIZED\",\n      COMMAND_RECOGNITION_START: \"COMMAND_RECOGNITION_START\",\n      COMMAND_RECOGNITION_END: \"COMMAND_RECOGNITION_END\",\n      COMMAND_MATCHED: \"COMMAND_MATCHED\",\n      NOT_COMMAND_MATCHED: \"NOT_COMMAND_MATCHED\"\n    };\n    this.Device = {\n      isMobile: false,\n      isChrome: true\n    };\n    if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\n      this.Device.isMobile = true;\n    }\n    if (navigator.userAgent.indexOf(\"Chrome\") == -1) {\n      this.Device.isChrome = false;\n    }\n    /**\r\n     * The default voice of Artyom in the Desktop. In mobile, you will need to initialize (or force the language)\r\n     * with a language code in order to find an available voice in the device, otherwise it will use the native voice.\r\n     */\n    this.ArtyomVoice = {\n      default: false,\n      lang: \"en-GB\",\n      localService: false,\n      name: \"Google UK English Male\",\n      voiceURI: \"Google UK English Male\"\n    };\n  }\n  /**\r\n   * Add dinamically commands to artyom using\r\n   * You can even add commands while artyom is active.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/addcommands\r\n   * @since 0.6\r\n   * @param {Object | Array[Objects]} param\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.addCommands = function (param) {\n    var _this = this;\n    var processCommand = function (command) {\n      if (command.hasOwnProperty(\"indexes\")) {\n        _this.ArtyomCommands.push(command);\n      } else {\n        console.error(\"The given command doesn't provide any index to execute.\");\n      }\n    };\n    if (param instanceof Array) {\n      for (var i = 0; i < param.length; i++) {\n        processCommand(param[i]);\n      }\n    } else {\n      processCommand(param);\n    }\n    return true;\n  };\n  ;\n  /**\r\n   * The SpeechSynthesisUtterance objects are stored in the artyom_garbage_collector variable\r\n   * to prevent the wrong behaviour of artyom.say.\r\n   * Use this method to clear all spoken SpeechSynthesisUtterance unused objects.\r\n   *\r\n   * @returns {Array<any>}\r\n   */\n  Artyom.prototype.clearGarbageCollection = function () {\n    return this.ArtyomGarbageCollection = [];\n  };\n  ;\n  /**\r\n   * Displays a message in the console if the artyom propery DEBUG is set to true.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/debug\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.debug = function (message, type) {\n    var preMessage = \"[v\" + this.getVersion() + \"] Artyom.js\";\n    if (this.ArtyomProperties.debug === true) {\n      switch (type) {\n        case \"error\":\n          console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #C12127; color: black;', 'color:black;');\n          break;\n        case \"warn\":\n          console.warn(message);\n          break;\n        case \"info\":\n          console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #4285F4; color: #FFFFFF', 'color:black;');\n          break;\n        default:\n          console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #005454; color: #BFF8F8', 'color:black;');\n          break;\n      }\n    }\n  };\n  /**\r\n   * Artyom have it's own diagnostics.\r\n   * Run this function in order to detect why artyom is not initialized.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/detecterrors\r\n   * @param {type} callback\r\n   * @returns {}\r\n   */\n  Artyom.prototype.detectErrors = function () {\n    var _this = this;\n    if (window.location.protocol == \"file:\") {\n      var message = \"Error: running Artyom directly from a file. The APIs require a different communication protocol like HTTP or HTTPS\";\n      console.error(message);\n      return {\n        code: \"artyom_error_localfile\",\n        message: message\n      };\n    }\n    if (!_this.Device.isChrome) {\n      var message = \"Error: the Speech Recognition and Speech Synthesis APIs require the Google Chrome Browser to work.\";\n      console.error(message);\n      return {\n        code: \"artyom_error_browser_unsupported\",\n        message: message\n      };\n    }\n    if (window.location.protocol != \"https:\") {\n      console.warn(\"Warning: artyom is being executed using the '\" + window.location.protocol + \"' protocol. The continuous mode requires a secure protocol (HTTPS)\");\n    }\n    return false;\n  };\n  /**\r\n   * Removes all the added commands of artyom.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/emptycommands\r\n   * @since 0.6\r\n   * @returns {Array}\r\n   */\n  Artyom.prototype.emptyCommands = function () {\n    return this.ArtyomCommands = [];\n  };\n  /**\r\n   * Returns an object with data of the matched element\r\n   *\r\n   * @private\r\n   * @param {string} comando\r\n   * @returns {MatchedCommand}\r\n   */\n  Artyom.prototype.execute = function (voz) {\n    var _this = this;\n    if (!voz) {\n      console.warn(\"Internal error: Execution of empty command\");\n      return;\n    }\n    // If artyom was initialized with a name, verify that the name begins with it to allow the execution of commands.\n    if (_this.ArtyomProperties.name) {\n      if (voz.indexOf(_this.ArtyomProperties.name) != 0) {\n        _this.debug(\"Artyom requires with a name \\\"\" + _this.ArtyomProperties.name + \"\\\" but the name wasn't spoken.\", \"warn\");\n        return;\n      }\n      // Remove name from voice command\n      voz = voz.substr(_this.ArtyomProperties.name.length);\n    }\n    _this.debug(\">> \" + voz);\n    /** @3\r\n     * Artyom needs time to think that\r\n     */\n    for (var i = 0; i < _this.ArtyomCommands.length; i++) {\n      var instruction = _this.ArtyomCommands[i];\n      var opciones = instruction.indexes;\n      var encontrado = -1;\n      var wildy = \"\";\n      for (var c = 0; c < opciones.length; c++) {\n        var opcion = opciones[c];\n        if (!instruction.smart) {\n          continue; //Jump if is not smart command\n        }\n        // Process RegExp\n        if (opcion instanceof RegExp) {\n          // If RegExp matches \n          if (opcion.test(voz)) {\n            _this.debug(\">> REGEX \" + opcion.toString() + \" MATCHED AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\n            encontrado = parseInt(c.toString());\n          }\n          // Otherwise just wildcards\n        } else {\n          if (opcion.indexOf(\"*\") != -1) {\n            ///LOGIC HERE\n            var grupo = opcion.split(\"*\");\n            if (grupo.length > 2) {\n              console.warn(\"Artyom found a smart command with \" + (grupo.length - 1) + \" wildcards. Artyom only support 1 wildcard for each command. Sorry\");\n              continue;\n            }\n            //START SMART COMMAND\n            var before = grupo[0];\n            var later = grupo[1];\n            // Wildcard in the end\n            if (later == \"\" || later == \" \") {\n              if (voz.indexOf(before) != -1 || voz.toLowerCase().indexOf(before.toLowerCase()) != -1) {\n                wildy = voz.replace(before, '');\n                wildy = wildy.toLowerCase().replace(before.toLowerCase(), '');\n                encontrado = parseInt(c.toString());\n              }\n            } else {\n              if (voz.indexOf(before) != -1 || voz.toLowerCase().indexOf(before.toLowerCase()) != -1) {\n                if (voz.indexOf(later) != -1 || voz.toLowerCase().indexOf(later.toLowerCase()) != -1) {\n                  wildy = voz.replace(before, '').replace(later, '');\n                  wildy = wildy.toLowerCase().replace(before.toLowerCase(), '').replace(later.toLowerCase(), '');\n                  wildy = wildy.toLowerCase().replace(later.toLowerCase(), '');\n                  encontrado = parseInt(c.toString());\n                }\n              }\n            }\n          } else {\n            console.warn(\"Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *\");\n          }\n        }\n        if (encontrado >= 0) {\n          encontrado = parseInt(c.toString());\n          break;\n        }\n      }\n      if (encontrado >= 0) {\n        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\n        var response = {\n          index: encontrado,\n          instruction: instruction,\n          wildcard: {\n            item: wildy,\n            full: voz\n          }\n        };\n        return response;\n      }\n    } //End @3\n    /** @1\r\n     * Search for IDENTICAL matches in the commands if nothing matches\r\n     * start with a index match in commands\r\n     */\n    for (var i = 0; i < _this.ArtyomCommands.length; i++) {\n      var instruction = _this.ArtyomCommands[i];\n      var opciones = instruction.indexes;\n      var encontrado = -1;\n      /**\r\n       * Execution of match with identical commands\r\n       */\n      for (var c = 0; c < opciones.length; c++) {\n        var opcion = opciones[c];\n        if (instruction.smart) {\n          continue; //Jump wildcard commands\n        }\n        if (voz === opcion) {\n          _this.debug(\">> MATCHED FULL EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\n          encontrado = parseInt(c.toString());\n          break;\n        } else if (voz.toLowerCase() === opcion.toLowerCase()) {\n          _this.debug(\">> MATCHED OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\n          encontrado = parseInt(c.toString());\n          break;\n        }\n      }\n      if (encontrado >= 0) {\n        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\n        var response = {\n          index: encontrado,\n          instruction: instruction\n        };\n        return response;\n      }\n    } //End @1\n    /**\r\n     * Step 3 Commands recognition.\r\n     * If the command is not smart, and any of the commands match exactly then try to find\r\n     * a command in all the quote.\r\n     */\n    for (var i = 0; i < _this.ArtyomCommands.length; i++) {\n      var instruction = _this.ArtyomCommands[i];\n      var opciones = instruction.indexes;\n      var encontrado = -1;\n      /**\r\n       * Execution of match with index\r\n       */\n      for (var c = 0; c < opciones.length; c++) {\n        if (instruction.smart) {\n          continue; //Jump wildcard commands\n        }\n        var opcion = opciones[c];\n        if (voz.indexOf(opcion) >= 0) {\n          _this.debug(\">> MATCHED INDEX EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\n          encontrado = parseInt(c.toString());\n          break;\n        } else if (voz.toLowerCase().indexOf(opcion.toLowerCase()) >= 0) {\n          _this.debug(\">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\n          encontrado = parseInt(c.toString());\n          break;\n        }\n      }\n      if (encontrado >= 0) {\n        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\n        var response = {\n          index: encontrado,\n          instruction: instruction\n        };\n        return response;\n      }\n    } //End Step 3\n    /**\r\n     * If the soundex options is enabled, proceed to process the commands in case that any of the previous\r\n     * ways of processing (exact, lowercase and command in quote) didn't match anything.\r\n     * Based on the soundex algorithm match a command if the spoken text is similar to any of the artyom commands.\r\n     * Example :\r\n     * If you have a command with \"Open Wallmart\" and \"Open Willmar\" is recognized, the open wallmart command will be triggered.\r\n     * soundex(\"Open Wallmart\") == soundex(\"Open Willmar\") <= true\r\n     *\r\n     */\n    if (_this.ArtyomProperties.soundex) {\n      for (var i = 0; i < _this.ArtyomCommands.length; i++) {\n        var instruction = _this.ArtyomCommands[i];\n        var opciones = instruction.indexes;\n        var encontrado = -1;\n        for (var c = 0; c < opciones.length; c++) {\n          var opcion = opciones[c];\n          if (instruction.smart) {\n            continue; //Jump wildcard commands\n          }\n          if (_this.soundex(voz) == _this.soundex(opcion)) {\n            _this.debug(\">> Matched Soundex command '\" + opcion + \"' AGAINST '\" + voz + \"' with index \" + c, \"info\");\n            encontrado = parseInt(c.toString());\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\n            var response = {\n              index: encontrado,\n              instruction: instruction\n            };\n            return response;\n          }\n        }\n      }\n    }\n    _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\n    _this.triggerEvent(_this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\n    return;\n  };\n  /**\r\n   * Force artyom to stop listen even if is in continuos mode.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/fatality\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.fatality = function () {\n    var _this = this;\n    //fatalityPromiseCallback\n    return new Promise(function (resolve, reject) {\n      // Expose the fatality promise callback to the helpers object of Artyom.\n      // The promise isn't resolved here itself but in the onend callback of\n      // the speechRecognition instance of artyom\n      _this.ArtyomProperties.helpers.fatalityPromiseCallback = resolve;\n      try {\n        // If config is continuous mode, deactivate anyway.\n        _this.ArtyomFlags.restartRecognition = false;\n        _this.ArtyomWebkitSpeechRecognition.stop();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * Returns an array with all the available commands for artyom.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getavailablecommands\r\n   * @readonly\r\n   * @returns {Array}\r\n   */\n  Artyom.prototype.getAvailableCommands = function () {\n    return this.ArtyomCommands;\n  };\n  /**\r\n   * Artyom can return inmediately the voices available in your browser.\r\n   *\r\n   * @readonly\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getvoices\r\n   * @returns {Array}\r\n   */\n  Artyom.prototype.getVoices = function () {\n    return window.speechSynthesis.getVoices();\n  };\n  /**\r\n   * Verify if the browser supports speechSynthesis.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/speechsupported\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.speechSupported = function () {\n    return 'speechSynthesis' in window;\n  };\n  /**\r\n   * Verify if the browser supports webkitSpeechRecognition.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/recognizingsupported\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.recognizingSupported = function () {\n    return 'webkitSpeechRecognition' in window;\n  };\n  /**\r\n   * Stops the actual and pendings messages that artyom have to say.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/shutup\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.shutUp = function () {\n    if ('speechSynthesis' in window) {\n      do {\n        window.speechSynthesis.cancel();\n      } while (window.speechSynthesis.pending === true);\n    }\n    this.ArtyomProperties.speaking = false;\n    this.clearGarbageCollection();\n  };\n  /**\r\n   * Returns an object with the actual properties of artyom.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getproperties\r\n   * @returns {object}\r\n   */\n  Artyom.prototype.getProperties = function () {\n    return this.ArtyomProperties;\n  };\n  /**\r\n   * Returns the code language of artyom according to initialize function.\r\n   * if initialize not used returns english GB.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getlanguage\r\n   * @returns {String}\r\n   */\n  Artyom.prototype.getLanguage = function () {\n    return this.ArtyomProperties.lang;\n  };\n  /**\r\n   * Retrieves the used version of Artyom.js\r\n   *\r\n   * @returns {String}\r\n   */\n  Artyom.prototype.getVersion = function () {\n    return '1.0.6';\n  };\n  /**\r\n   * Artyom awaits for orders when this function\r\n   * is executed.\r\n   *\r\n   * If artyom gets a first parameter the instance will be stopped.\r\n   *\r\n   * @private\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.hey = function (resolve, reject) {\n    var start_timestamp;\n    var artyom_is_allowed;\n    var _this = this;\n    /**\r\n     * On mobile devices the recognized text is always thrown twice.\r\n     * By setting the following configuration, fixes the issue\r\n     */\n    if (this.Device.isMobile) {\n      this.ArtyomWebkitSpeechRecognition.continuous = false;\n      this.ArtyomWebkitSpeechRecognition.interimResults = false;\n      this.ArtyomWebkitSpeechRecognition.maxAlternatives = 1;\n    } else {\n      this.ArtyomWebkitSpeechRecognition.continuous = true;\n      this.ArtyomWebkitSpeechRecognition.interimResults = true;\n    }\n    this.ArtyomWebkitSpeechRecognition.lang = this.ArtyomProperties.lang;\n    this.ArtyomWebkitSpeechRecognition.onstart = function () {\n      _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\n      _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\n      _this.ArtyomProperties.recognizing = true;\n      artyom_is_allowed = true;\n      resolve();\n    };\n    /**\r\n     * Handle all artyom posible exceptions\r\n     *\r\n     * @param {type} event\r\n     * @returns {undefined}\r\n     */\n    this.ArtyomWebkitSpeechRecognition.onerror = function (event) {\n      // Reject promise on initialization\n      reject(event.error);\n      // Dispath error globally (artyom.when)\n      _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\n        code: event.error\n      });\n      if (event.error == 'audio-capture') {\n        artyom_is_allowed = false;\n      }\n      if (event.error == 'not-allowed') {\n        artyom_is_allowed = false;\n        if (event.timeStamp - start_timestamp < 100) {\n          _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\n            code: \"info-blocked\",\n            message: \"Artyom needs the permision of the microphone, is blocked.\"\n          });\n        } else {\n          _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\n            code: \"info-denied\",\n            message: \"Artyom needs the permision of the microphone, is denied\"\n          });\n        }\n      }\n    };\n    /**\r\n     * Check if continuous mode is active and restart the recognition.\r\n     * Throw events too.\r\n     *\r\n     * @returns {undefined}\r\n     */\n    _this.ArtyomWebkitSpeechRecognition.onend = function () {\n      if (_this.ArtyomFlags.restartRecognition === true) {\n        if (artyom_is_allowed === true) {\n          _this.ArtyomWebkitSpeechRecognition.start();\n          _this.debug(\"Continuous mode enabled, restarting\", \"info\");\n        } else {\n          console.error(\"Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener\");\n        }\n        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\n          code: \"continuous_mode_enabled\",\n          message: \"OnEnd event reached with continuous mode\"\n        });\n      } else {\n        // If the fatality promise callback was set, invoke it\n        if (_this.ArtyomProperties.helpers.fatalityPromiseCallback) {\n          // As the speech recognition doesn't finish really, wait 500ms\n          // to trigger the real fatality callback\n          setTimeout(function () {\n            _this.ArtyomProperties.helpers.fatalityPromiseCallback();\n          }, 500);\n          _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\n            code: \"continuous_mode_disabled\",\n            message: \"OnEnd event reached without continuous mode\"\n          });\n        }\n      }\n      _this.ArtyomProperties.recognizing = false;\n    };\n    /**\r\n     * Declare the processor dinamycally according to the mode of artyom\r\n     * to increase the performance.\r\n     *\r\n     * @type {Function}\r\n     * @return\r\n     */\n    var onResultProcessor;\n    // Process the recognition in normal mode\n    if (_this.ArtyomProperties.mode == \"normal\") {\n      onResultProcessor = function (event) {\n        if (!_this.ArtyomCommands.length) {\n          _this.debug(\"No commands to process in normal mode.\");\n          return;\n        }\n        var cantidadResultados = event.results.length;\n        _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\n        for (var i = event.resultIndex; i < cantidadResultados; ++i) {\n          var identificated = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            var comando = _this.execute(identificated.trim());\n            // Redirect the output of the text if necessary\n            if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === \"function\") {\n              _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\n            }\n            if (comando && _this.ArtyomProperties.recognizing == true) {\n              _this.debug(\"<< Executing Matching Recognition in normal mode >>\", \"info\");\n              _this.ArtyomWebkitSpeechRecognition.stop();\n              _this.ArtyomProperties.recognizing = false;\n              // Execute the command if smart\n              if (comando.wildcard) {\n                comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\n                // Execute a normal command\n              } else {\n                comando.instruction.action(comando.index);\n              }\n              break;\n            }\n          } else {\n            // Redirect output when necesary\n            if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === \"function\") {\n              _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\n            }\n            if (typeof _this.ArtyomProperties.executionKeyword === \"string\") {\n              if (identificated.indexOf(_this.ArtyomProperties.executionKeyword) != -1) {\n                var comando = _this.execute(identificated.replace(_this.ArtyomProperties.executionKeyword, '').trim());\n                if (comando && _this.ArtyomProperties.recognizing == true) {\n                  _this.debug(\"<< Executing command ordered by ExecutionKeyword >>\", 'info');\n                  _this.ArtyomWebkitSpeechRecognition.stop();\n                  _this.ArtyomProperties.recognizing = false;\n                  //Executing Command Action\n                  if (comando.wildcard) {\n                    comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\n                  } else {\n                    comando.instruction.action(comando.index);\n                  }\n                  break;\n                }\n              }\n            }\n            _this.debug(\"Normal mode : \" + identificated);\n          }\n        }\n      };\n    }\n    // Process the recognition in quick mode\n    if (_this.ArtyomProperties.mode == \"quick\") {\n      onResultProcessor = function (event) {\n        if (!_this.ArtyomCommands.length) {\n          _this.debug(\"No commands to process.\");\n          return;\n        }\n        var cantidadResultados = event.results.length;\n        _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\n        for (var i = event.resultIndex; i < cantidadResultados; ++i) {\n          var identificated = event.results[i][0].transcript;\n          if (!event.results[i].isFinal) {\n            var comando = _this.execute(identificated.trim());\n            //Redirect output when necesary\n            if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === \"function\") {\n              _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\n            }\n            if (comando && _this.ArtyomProperties.recognizing == true) {\n              _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\n              _this.ArtyomWebkitSpeechRecognition.stop();\n              _this.ArtyomProperties.recognizing = false;\n              //Executing Command Action\n              if (comando.wildcard) {\n                comando.instruction.action(comando.index, comando.wildcard.item);\n              } else {\n                comando.instruction.action(comando.index);\n              }\n              break;\n            }\n          } else {\n            var comando = _this.execute(identificated.trim());\n            //Redirect output when necesary\n            if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === \"function\") {\n              _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\n            }\n            if (comando && _this.ArtyomProperties.recognizing == true) {\n              _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\n              _this.ArtyomWebkitSpeechRecognition.stop();\n              _this.ArtyomProperties.recognizing = false;\n              //Executing Command Action\n              if (comando.wildcard) {\n                comando.instruction.action(comando.index, comando.wildcard.item);\n              } else {\n                comando.instruction.action(comando.index);\n              }\n              break;\n            }\n          }\n          _this.debug(\"Quick mode : \" + identificated);\n        }\n      };\n    }\n    // Process the recognition in remote mode\n    if (_this.ArtyomProperties.mode == \"remote\") {\n      onResultProcessor = function (event) {\n        var cantidadResultados = event.results.length;\n        _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\n        if (typeof _this.ArtyomProperties.helpers.remoteProcessorHandler !== \"function\") {\n          return _this.debug(\"The remoteProcessorService is undefined.\", \"warn\");\n        }\n        for (var i = event.resultIndex; i < cantidadResultados; ++i) {\n          var identificated = event.results[i][0].transcript;\n          _this.ArtyomProperties.helpers.remoteProcessorHandler({\n            text: identificated,\n            isFinal: event.results[i].isFinal\n          });\n        }\n      };\n    }\n    /**\r\n     * Process the recognition event with the previously\r\n     * declared processor function.\r\n     *\r\n     * @param {type} event\r\n     * @returns {undefined}\r\n     */\n    _this.ArtyomWebkitSpeechRecognition.onresult = function (event) {\n      if (_this.ArtyomProperties.obeying) {\n        onResultProcessor(event);\n      } else {\n        // Handle obeyKeyword if exists and artyom is not obeying\n        if (!_this.ArtyomProperties.obeyKeyword) {\n          return;\n        }\n        var temporal = \"\";\n        var interim = \"\";\n        for (var i = 0; i < event.results.length; ++i) {\n          if (event.results[i].isFinal) {\n            temporal += event.results[i][0].transcript;\n          } else {\n            interim += event.results[i][0].transcript;\n          }\n        }\n        _this.debug(\"Artyom is not obeying\", \"warn\");\n        // If the obeyKeyword is found in the recognized text\n        // enable command recognition again\n        if (interim.indexOf(_this.ArtyomProperties.obeyKeyword) > -1 || temporal.indexOf(_this.ArtyomProperties.obeyKeyword) > -1) {\n          _this.ArtyomProperties.obeying = true;\n        }\n      }\n    };\n    if (_this.ArtyomProperties.recognizing) {\n      _this.ArtyomWebkitSpeechRecognition.stop();\n      _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\n      _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\n    } else {\n      try {\n        _this.ArtyomWebkitSpeechRecognition.start();\n      } catch (e) {\n        _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\n          code: \"recognition_overlap\",\n          message: \"A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser\"\n        });\n      }\n    }\n  };\n  /**\r\n   * Set up artyom for the application.\r\n   *\r\n   * This function will set the default language used by artyom\r\n   * or notice the user if artyom is not supported in the actual\r\n   * browser\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/initialize\r\n   * @param {Object} config\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.initialize = function (config) {\n    var _this = this;\n    if (typeof config !== \"object\") {\n      return Promise.reject(\"You must give the configuration for start artyom properly.\");\n    }\n    if (config.hasOwnProperty(\"lang\")) {\n      _this.ArtyomVoice = _this.getVoice(config.lang);\n      _this.ArtyomProperties.lang = config.lang;\n    }\n    if (config.hasOwnProperty(\"continuous\")) {\n      if (config.continuous) {\n        this.ArtyomProperties.continuous = true;\n        this.ArtyomFlags.restartRecognition = true;\n      } else {\n        this.ArtyomProperties.continuous = false;\n        this.ArtyomFlags.restartRecognition = false;\n      }\n    }\n    if (config.hasOwnProperty(\"speed\")) {\n      this.ArtyomProperties.speed = config.speed;\n    }\n    if (config.hasOwnProperty(\"soundex\")) {\n      this.ArtyomProperties.soundex = config.soundex;\n    }\n    if (config.hasOwnProperty(\"executionKeyword\")) {\n      this.ArtyomProperties.executionKeyword = config.executionKeyword;\n    }\n    if (config.hasOwnProperty(\"obeyKeyword\")) {\n      this.ArtyomProperties.obeyKeyword = config.obeyKeyword;\n    }\n    if (config.hasOwnProperty(\"volume\")) {\n      this.ArtyomProperties.volume = config.volume;\n    }\n    if (config.hasOwnProperty(\"listen\")) {\n      this.ArtyomProperties.listen = config.listen;\n    }\n    if (config.hasOwnProperty(\"name\")) {\n      this.ArtyomProperties.name = config.name;\n    }\n    if (config.hasOwnProperty(\"debug\")) {\n      this.ArtyomProperties.debug = config.debug;\n    } else {\n      console.warn(\"The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.\");\n    }\n    if (config.mode) {\n      this.ArtyomProperties.mode = config.mode;\n    }\n    if (this.ArtyomProperties.listen === true) {\n      return new Promise(function (resolve, reject) {\n        _this.hey(resolve, reject);\n      });\n    }\n    return Promise.resolve(true);\n  };\n  /**\r\n   * Add commands like an artisan. If you use artyom for simple tasks\r\n   * then probably you don't like to write a lot to achieve it.\r\n   *\r\n   * Use the artisan syntax to write less, but with the same accuracy.\r\n   *\r\n   * @disclaimer Not a promise-based implementation, just syntax.\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.on = function (indexes, smart) {\n    var _this = this;\n    return {\n      then: function (action) {\n        var command = {\n          indexes: indexes,\n          action: action\n        };\n        if (smart) {\n          command.smart = true;\n        }\n        _this.addCommands(command);\n      }\n    };\n  };\n  /**\r\n   * Generates an artyom event with the designed name\r\n   *\r\n   * @param {type} name\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.triggerEvent = function (name, param) {\n    var event = new CustomEvent(name, {\n      'detail': param\n    });\n    document.dispatchEvent(event);\n    return event;\n  };\n  /**\r\n   * Repeats the last sentence that artyom said.\r\n   * Useful in noisy environments.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/repeatlastsay\r\n   * @param {Boolean} returnObject If set to true, an object with the text and the timestamp when was executed will be returned.\r\n   * @returns {Object}\r\n   */\n  Artyom.prototype.repeatLastSay = function (returnObject) {\n    var last = this.ArtyomProperties.helpers.lastSay;\n    if (returnObject) {\n      return last;\n    } else {\n      if (last != null) {\n        this.say(last.text);\n      }\n    }\n  };\n  /**\r\n   * Create a listener when an artyom action is called.\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/when\r\n   * @param {type} event\r\n   * @param {type} action\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.when = function (event, action) {\n    return document.addEventListener(event, function (e) {\n      action(e[\"detail\"]);\n    }, false);\n  };\n  /**\r\n   * Process the recognized text if artyom is active in remote mode.\r\n   *\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.remoteProcessorService = function (action) {\n    this.ArtyomProperties.helpers.remoteProcessorHandler = action;\n    return true;\n  };\n  /**\r\n   * Verify if there's a voice available for a language using its language code identifier.\r\n   *\r\n   * @return {Boolean}\r\n   */\n  Artyom.prototype.voiceAvailable = function (languageCode) {\n    return typeof this.getVoice(languageCode) !== \"undefined\";\n  };\n  /**\r\n   * A boolean to check if artyom is obeying commands or not.\r\n   *\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.isObeying = function () {\n    return this.ArtyomProperties.obeying;\n  };\n  /**\r\n   * Allow artyom to obey commands again.\r\n   *\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.obey = function () {\n    return this.ArtyomProperties.obeying = true;\n  };\n  /**\r\n   * Pause the processing of commands. Artyom still listening in the background and it can be resumed after a couple of seconds.\r\n   *\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.dontObey = function () {\n    return this.ArtyomProperties.obeying = false;\n  };\n  /**\r\n   * This function returns a boolean according to the speechSynthesis status\r\n   * if artyom is speaking, will return true.\r\n   *\r\n   * Note: This is not a feature of speechSynthesis, therefore this value hangs on\r\n   * the fiability of the onStart and onEnd events of the speechSynthesis\r\n   *\r\n   * @since 0.9.3\r\n   * @summary Returns true if speechSynthesis is active\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.isSpeaking = function () {\n    return this.ArtyomProperties.speaking;\n  };\n  /**\r\n   * This function returns a boolean according to the SpeechRecognition status\r\n   * if artyom is listening, will return true.\r\n   *\r\n   * Note: This is not a feature of SpeechRecognition, therefore this value hangs on\r\n   * the fiability of the onStart and onEnd events of the SpeechRecognition\r\n   *\r\n   * @since 0.9.3\r\n   * @summary Returns true if SpeechRecognition is active\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.isRecognizing = function () {\n    return this.ArtyomProperties.recognizing;\n  };\n  /**\r\n   * This function will return the webkitSpeechRecognition object used by artyom\r\n   * retrieve it only to debug on it or get some values, do not make changes directly\r\n   *\r\n   * @readonly\r\n   * @since 0.9.2\r\n   * @summary Retrieve the native webkitSpeechRecognition object\r\n   * @returns {Object webkitSpeechRecognition}\r\n   */\n  Artyom.prototype.getNativeApi = function () {\n    return this.ArtyomWebkitSpeechRecognition;\n  };\n  /**\r\n   * Returns the SpeechSynthesisUtterance garbageobjects.\r\n   *\r\n   * @returns {Array}\r\n   */\n  Artyom.prototype.getGarbageCollection = function () {\n    return this.ArtyomGarbageCollection;\n  };\n  /**\r\n   *  Retrieve a single voice of the browser by it's language code.\r\n   *  It will return the first voice available for the language on every device.\r\n   *\r\n   * @param languageCode\r\n   */\n  Artyom.prototype.getVoice = function (languageCode) {\n    var voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[languageCode];\n    if (!voiceIdentifiersArray) {\n      console.warn(\"The providen language \" + languageCode + \" isn't available, using English Great britain as default\");\n      voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[\"en-GB\"];\n    }\n    var voice = undefined;\n    var voices = speechSynthesis.getVoices();\n    var voicesLength = voiceIdentifiersArray.length;\n    var _loop_1 = function (i) {\n      var foundVoice = voices.filter(function (voice) {\n        return voice.name == voiceIdentifiersArray[i] || voice.lang == voiceIdentifiersArray[i];\n      })[0];\n      if (foundVoice) {\n        voice = foundVoice;\n        return \"break\";\n      }\n    };\n    for (var i = 0; i < voicesLength; i++) {\n      var state_1 = _loop_1(i);\n      if (state_1 === \"break\") break;\n    }\n    return voice;\n  };\n  /**\r\n   * Artyom provide an easy way to create a\r\n   * dictation for your user.\r\n   *\r\n   * Just create an instance and start and stop when you want\r\n   *\r\n   * @returns Object | newDictation\r\n   */\n  Artyom.prototype.newDictation = function (settings) {\n    var _this = this;\n    if (!_this.recognizingSupported()) {\n      console.error(\"SpeechRecognition is not supported in this browser\");\n      return false;\n    }\n    var dictado = new window.webkitSpeechRecognition();\n    dictado.continuous = true;\n    dictado.interimResults = true;\n    dictado.lang = _this.ArtyomProperties.lang;\n    dictado.onresult = function (event) {\n      var temporal = \"\";\n      var interim = \"\";\n      for (var i = 0; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          temporal += event.results[i][0].transcript;\n        } else {\n          interim += event.results[i][0].transcript;\n        }\n      }\n      if (settings.onResult) {\n        settings.onResult(interim, temporal);\n      }\n    };\n    return new function () {\n      var dictation = dictado;\n      var flagStartCallback = true;\n      var flagRestart = false;\n      this.onError = null;\n      this.start = function () {\n        if (settings.continuous === true) {\n          flagRestart = true;\n        }\n        dictation.onstart = function () {\n          if (typeof settings.onStart === \"function\") {\n            if (flagStartCallback === true) {\n              settings.onStart();\n            }\n          }\n        };\n        dictation.onend = function () {\n          if (flagRestart === true) {\n            flagStartCallback = false;\n            dictation.start();\n          } else {\n            flagStartCallback = true;\n            if (typeof settings.onEnd === \"function\") {\n              settings.onEnd();\n            }\n          }\n        };\n        dictation.start();\n      };\n      this.stop = function () {\n        flagRestart = false;\n        dictation.stop();\n      };\n      if (typeof settings.onError === \"function\") {\n        dictation.onerror = settings.onError;\n      }\n    }();\n  };\n  /**\r\n   * A voice prompt will be executed.\r\n   *\r\n   * @param {type} config\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.newPrompt = function (config) {\n    if (typeof config !== \"object\") {\n      console.error(\"Expected the prompt configuration.\");\n    }\n    var copyActualCommands = Object.assign([], this.ArtyomCommands);\n    var _this = this;\n    this.emptyCommands();\n    var promptCommand = {\n      description: \"Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes\",\n      indexes: config.options,\n      action: function (i, wildcard) {\n        _this.ArtyomCommands = copyActualCommands;\n        var toExe = config.onMatch(i, wildcard);\n        if (typeof toExe !== \"function\") {\n          console.error(\"onMatch function expects a returning function to be executed\");\n          return;\n        }\n        toExe();\n      }\n    };\n    if (config.smart) {\n      promptCommand.smart = true;\n    }\n    this.addCommands(promptCommand);\n    if (typeof config.beforePrompt !== \"undefined\") {\n      config.beforePrompt();\n    }\n    var callbacks = {\n      onStart: function () {\n        if (typeof config.onStartPrompt !== \"undefined\") {\n          config.onStartPrompt();\n        }\n      },\n      onEnd: function () {\n        if (typeof config.onEndPrompt !== \"undefined\") {\n          config.onEndPrompt();\n        }\n      }\n    };\n    this.say(config.question, callbacks);\n  };\n  /**\r\n   * Says a random quote and returns it's object\r\n   *\r\n   * @param {type} data\r\n   * @returns {object}\r\n   */\n  Artyom.prototype.sayRandom = function (data) {\n    if (data instanceof Array) {\n      var index = Math.floor(Math.random() * data.length);\n      this.say(data[index]);\n      return {\n        text: data[index],\n        index: index\n      };\n    } else {\n      console.error(\"Random quotes must be in an array !\");\n      return null;\n    }\n  };\n  /**\r\n   * Shortcut method to enable the artyom debug on the fly.\r\n   *\r\n   * @returns {Array}\r\n   */\n  Artyom.prototype.setDebug = function (status) {\n    if (status) {\n      return this.ArtyomProperties.debug = true;\n    } else {\n      return this.ArtyomProperties.debug = false;\n    }\n  };\n  /**\r\n   * Simulate a voice command via JS\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/simulateinstruction\r\n   * @param {type} sentence\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.simulateInstruction = function (sentence) {\n    var _this = this;\n    if (!sentence || typeof sentence !== \"string\") {\n      console.warn(\"Cannot execute a non string command\");\n      return false;\n    }\n    var foundCommand = _this.execute(sentence); //Command founded object\n    if (typeof foundCommand === \"object\") {\n      if (foundCommand.instruction) {\n        if (foundCommand.instruction.smart) {\n          _this.debug('Smart command matches with simulation, executing', \"info\");\n          foundCommand.instruction.action(foundCommand.index, foundCommand.wildcard.item, foundCommand.wildcard.full);\n        } else {\n          _this.debug('Command matches with simulation, executing', \"info\");\n          foundCommand.instruction.action(foundCommand.index); //Execute Normal command\n        }\n        return true;\n      }\n    } else {\n      console.warn(\"No command founded trying with \" + sentence);\n      return false;\n    }\n  };\n  /**\r\n   * Javascript implementation of the soundex algorithm.\r\n   * @see https://gist.github.com/shawndumas/1262659\r\n   * @returns {String}\r\n   */\n  Artyom.prototype.soundex = function (s) {\n    var a = s.toLowerCase().split('');\n    var f = a.shift();\n    var r = '';\n    var codes = {\n      a: \"\",\n      e: \"\",\n      i: \"\",\n      o: \"\",\n      u: \"\",\n      b: 1,\n      f: 1,\n      p: 1,\n      v: 1,\n      c: 2,\n      g: 2,\n      j: 2,\n      k: 2,\n      q: 2,\n      s: 2,\n      x: 2,\n      z: 2,\n      d: 3,\n      t: 3,\n      l: 4,\n      m: 5,\n      n: 5,\n      r: 6\n    };\n    r = f + a.map(function (v, i, a) {\n      return codes[v];\n    }).filter(function (v, i, a) {\n      return i === 0 ? v !== codes[f] : v !== a[i - 1];\n    }).join('');\n    return (r + '000').slice(0, 4).toUpperCase();\n  };\n  /**\r\n   * Splits a string into an array of strings with a limited size (chunk_length).\r\n   *\r\n   * @param {String} input text to split into chunks\r\n   * @param {Integer} chunk_length limit of characters in every chunk\r\n   */\n  Artyom.prototype.splitStringByChunks = function (input, chunk_length) {\n    input = input || \"\";\n    chunk_length = chunk_length || 100;\n    var curr = chunk_length;\n    var prev = 0;\n    var output = [];\n    while (input[curr]) {\n      if (input[curr++] == ' ') {\n        output.push(input.substring(prev, curr));\n        prev = curr;\n        curr += chunk_length;\n      }\n    }\n    output.push(input.substr(prev));\n    return output;\n  };\n  /**\r\n   * Allows to retrieve the recognized spoken text of artyom\r\n   * and do something with it everytime something is recognized\r\n   *\r\n   * @param {String} action\r\n   * @returns {Boolean}\r\n   */\n  Artyom.prototype.redirectRecognizedTextOutput = function (action) {\n    if (typeof action != \"function\") {\n      console.warn(\"Expected function to handle the recognized text ...\");\n      return false;\n    }\n    this.ArtyomProperties.helpers.redirectRecognizedTextOutput = action;\n    return true;\n  };\n  /**\r\n   * Restarts artyom with the initial configuration.\r\n   *\r\n   * @param configuration\r\n   */\n  Artyom.prototype.restart = function () {\n    var _this = this;\n    var _copyInit = _this.ArtyomProperties;\n    return new Promise(function (resolve, reject) {\n      _this.fatality().then(function () {\n        _this.initialize(_copyInit).then(resolve, reject);\n      });\n    });\n  };\n  /**\r\n   * Talks a text according to the given parameters.\r\n   *\r\n   * @private This function is only to be used internally.\r\n   * @param {String} text Text to be spoken\r\n   * @param {Int} actualChunk Number of chunk of the\r\n   * @param {Int} totalChunks\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.talk = function (text, actualChunk, totalChunks, callbacks) {\n    var _this = this;\n    var msg = new SpeechSynthesisUtterance();\n    msg.text = text;\n    msg.volume = this.ArtyomProperties.volume;\n    msg.rate = this.ArtyomProperties.speed;\n    // Select the voice according to the selected\n    var availableVoice = _this.getVoice(_this.ArtyomProperties.lang);\n    if (callbacks) {\n      // If the language to speak has been forced, use it\n      if (callbacks.hasOwnProperty(\"lang\")) {\n        availableVoice = _this.getVoice(callbacks.lang);\n      }\n    }\n    // If is a mobile device, provide only the language code in the lang property i.e \"es_ES\"\n    if (this.Device.isMobile) {\n      // Try to set the voice only if exists, otherwise don't use anything to use the native voice\n      if (availableVoice) {\n        msg.lang = availableVoice.lang;\n      }\n      // If browser provide the entire object\n    } else {\n      msg.voice = availableVoice;\n    }\n    // If is first text chunk (onStart)\n    if (actualChunk == 1) {\n      msg.addEventListener('start', function () {\n        // Set artyom is talking\n        _this.ArtyomProperties.speaking = true;\n        // Trigger the onSpeechSynthesisStart event\n        _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\n        _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\n        // Trigger the onStart callback if exists\n        if (callbacks) {\n          if (typeof callbacks.onStart == \"function\") {\n            callbacks.onStart.call(msg);\n          }\n        }\n      });\n    }\n    // If is final text chunk (onEnd)\n    if (actualChunk >= totalChunks) {\n      msg.addEventListener('end', function () {\n        // Set artyom is talking\n        _this.ArtyomProperties.speaking = false;\n        // Trigger the onSpeechSynthesisEnd event\n        _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\n        _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\n        // Trigger the onEnd callback if exists.\n        if (callbacks) {\n          if (typeof callbacks.onEnd == \"function\") {\n            callbacks.onEnd.call(msg);\n          }\n        }\n      });\n    }\n    // Notice how many chunks were processed for the given text.\n    this.debug(actualChunk + \" text chunk processed succesfully out of \" + totalChunks);\n    // Important : Save the SpeechSynthesisUtterance object in memory, otherwise it will get lost\n    this.ArtyomGarbageCollection.push(msg);\n    window.speechSynthesis.speak(msg);\n  };\n  /**\r\n   * Process the given text into chunks and execute the private function talk\r\n   *\r\n   * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/say\r\n   * @param {String} message Text to be spoken\r\n   * @param {Object} callbacks\r\n   * @returns {undefined}\r\n   */\n  Artyom.prototype.say = function (message, callbacks) {\n    var artyom_say_max_chunk_length = 115;\n    var _this = this;\n    var definitive = [];\n    if (this.speechSupported()) {\n      if (typeof message != 'string') {\n        return console.warn(\"Artyom expects a string to speak \" + typeof message + \" given\");\n      }\n      if (!message.length) {\n        return console.warn(\"Cannot speak empty string\");\n      }\n      // If the providen text is long, proceed to split it\n      if (message.length > artyom_say_max_chunk_length) {\n        // Split the given text by pause reading characters [\",\",\":\",\";\",\". \"] to provide a natural reading feeling.\n        var naturalReading = message.split(/,|:|\\. |;/);\n        naturalReading.forEach(function (chunk, index) {\n          // If the sentence is too long and could block the API, split it to prevent any errors.\n          if (chunk.length > artyom_say_max_chunk_length) {\n            // Process the providen string into strings (withing an array) of maximum aprox. 115 characters to prevent any error with the API.\n            var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);\n            // Add items of the processed sentence into the definitive chunk.\n            definitive.push.apply(definitive, temp_processed);\n          } else {\n            // Otherwise just add the sentence to being spoken.\n            definitive.push(chunk);\n          }\n        });\n      } else {\n        definitive.push(message);\n      }\n      // Clean any empty item in array\n      definitive = definitive.filter(function (e) {\n        return e;\n      });\n      // Finally proceed to talk the chunks and assign the callbacks.\n      definitive.forEach(function (chunk, index) {\n        var numberOfChunk = index + 1;\n        if (chunk) {\n          _this.talk(chunk, numberOfChunk, definitive.length, callbacks);\n        }\n      });\n      // Save the spoken text into the lastSay object of artyom\n      _this.ArtyomProperties.helpers.lastSay = {\n        text: message,\n        date: new Date()\n      };\n    }\n  };\n  return Artyom;\n}();\nexports.default = Artyom;","map":{"version":3,"names":["Object","defineProperty","exports","value","Artyom","ArtyomCommands","ArtyomVoicesIdentifiers","window","hasOwnProperty","speechSynthesis","getVoices","console","error","ArtyomWebkitSpeechRecognition","webkitSpeechRecognition","ArtyomProperties","lang","recognizing","continuous","speed","volume","listen","mode","debug","helpers","redirectRecognizedTextOutput","remoteProcessorHandler","lastSay","fatalityPromiseCallback","executionKeyword","obeyKeyword","speaking","obeying","soundex","name","ArtyomGarbageCollection","ArtyomFlags","restartRecognition","ArtyomGlobalEvents","ERROR","SPEECH_SYNTHESIS_START","SPEECH_SYNTHESIS_END","TEXT_RECOGNIZED","COMMAND_RECOGNITION_START","COMMAND_RECOGNITION_END","COMMAND_MATCHED","NOT_COMMAND_MATCHED","Device","isMobile","isChrome","navigator","userAgent","match","indexOf","ArtyomVoice","default","localService","voiceURI","prototype","addCommands","param","_this","processCommand","command","push","Array","i","length","clearGarbageCollection","message","type","preMessage","getVersion","log","warn","detectErrors","location","protocol","code","emptyCommands","execute","voz","substr","instruction","opciones","indexes","encontrado","wildy","c","opcion","smart","RegExp","test","toString","parseInt","grupo","split","before","later","toLowerCase","replace","triggerEvent","response","index","wildcard","item","full","fatality","Promise","resolve","reject","stop","e","getAvailableCommands","speechSupported","recognizingSupported","shutUp","cancel","pending","getProperties","getLanguage","hey","start_timestamp","artyom_is_allowed","interimResults","maxAlternatives","onstart","onerror","event","timeStamp","onend","start","setTimeout","onResultProcessor","cantidadResultados","results","resultIndex","identificated","transcript","isFinal","comando","trim","action","text","onresult","temporal","interim","initialize","config","getVoice","on","then","CustomEvent","document","dispatchEvent","repeatLastSay","returnObject","last","say","when","addEventListener","remoteProcessorService","voiceAvailable","languageCode","isObeying","obey","dontObey","isSpeaking","isRecognizing","getNativeApi","getGarbageCollection","voiceIdentifiersArray","voice","undefined","voices","voicesLength","_loop_1","foundVoice","filter","state_1","newDictation","settings","dictado","onResult","dictation","flagStartCallback","flagRestart","onError","onStart","onEnd","newPrompt","copyActualCommands","assign","promptCommand","description","options","toExe","onMatch","beforePrompt","callbacks","onStartPrompt","onEndPrompt","question","sayRandom","data","Math","floor","random","setDebug","status","simulateInstruction","sentence","foundCommand","s","a","f","shift","r","codes","o","u","b","p","v","g","j","k","q","x","z","d","t","l","m","n","map","join","slice","toUpperCase","splitStringByChunks","input","chunk_length","curr","prev","output","substring","restart","_copyInit","talk","actualChunk","totalChunks","msg","SpeechSynthesisUtterance","rate","availableVoice","call","speak","artyom_say_max_chunk_length","definitive","naturalReading","forEach","chunk","temp_processed","apply","numberOfChunk","date","Date"],"sources":["/Users/madhushraya/Desktop/apps/vbtes/node_modules/artyom.js/build/artyom.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Artyom.js is a voice control, speech recognition and speech synthesis JavaScript library.\r\n *\r\n * @requires {webkitSpeechRecognition && speechSynthesis}\r\n * @license MIT\r\n * @version 1.0.6\r\n * @copyright 2017 Our Code World (www.ourcodeworld.com) All Rights Reserved.\r\n * @author Carlos Delgado (https://github.com/sdkcarlos) and Sema García (https://github.com/semagarcia)\r\n * @see https://sdkcarlos.github.io/sites/artyom.html\r\n * @see http://docs.ourcodeworld.com/projects/artyom-js\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path=\"artyom.d.ts\" />\r\n// Remove \"export default \" keywords if willing to build with `npm run artyom-build-window`\r\nvar Artyom = (function () {\r\n    // Triggered at the declaration of \r\n    function Artyom() {\r\n        this.ArtyomCommands = [];\r\n        this.ArtyomVoicesIdentifiers = {\r\n            // German\r\n            \"de-DE\": [\"Google Deutsch\", \"de-DE\", \"de_DE\"],\r\n            // Spanish\r\n            \"es-ES\": [\"Google español\", \"es-ES\", \"es_ES\", \"es-MX\", \"es_MX\"],\r\n            // Italian\r\n            \"it-IT\": [\"Google italiano\", \"it-IT\", \"it_IT\"],\r\n            // Japanese\r\n            \"jp-JP\": [\"Google 日本人\", \"ja-JP\", \"ja_JP\"],\r\n            // English USA\r\n            \"en-US\": [\"Google US English\", \"en-US\", \"en_US\"],\r\n            // English UK\r\n            \"en-GB\": [\"Google UK English Male\", \"Google UK English Female\", \"en-GB\", \"en_GB\"],\r\n            // Brazilian Portuguese\r\n            \"pt-BR\": [\"Google português do Brasil\", \"pt-PT\", \"pt-BR\", \"pt_PT\", \"pt_BR\"],\r\n            // Portugal Portuguese\r\n            // Note: in desktop, there's no voice for portugal Portuguese\r\n            \"pt-PT\": [\"Google português do Brasil\", \"pt-PT\", \"pt_PT\"],\r\n            // Russian\r\n            \"ru-RU\": [\"Google русский\", \"ru-RU\", \"ru_RU\"],\r\n            // Dutch (holland)\r\n            \"nl-NL\": [\"Google Nederlands\", \"nl-NL\", \"nl_NL\"],\r\n            // French\r\n            \"fr-FR\": [\"Google français\", \"fr-FR\", \"fr_FR\"],\r\n            // Polish\r\n            \"pl-PL\": [\"Google polski\", \"pl-PL\", \"pl_PL\"],\r\n            // Indonesian\r\n            \"id-ID\": [\"Google Bahasa Indonesia\", \"id-ID\", \"id_ID\"],\r\n            // Hindi\r\n            \"hi-IN\": [\"Google हिन्दी\", \"hi-IN\", \"hi_IN\"],\r\n            // Mandarin Chinese\r\n            \"zh-CN\": [\"Google 普通话（中国大陆）\", \"zh-CN\", \"zh_CN\"],\r\n            // Cantonese Chinese\r\n            \"zh-HK\": [\"Google 粤語（香港）\", \"zh-HK\", \"zh_HK\"],\r\n            // Native voice\r\n            \"native\": [\"native\"]\r\n        };\r\n        // Important: retrieve the voices of the browser as soon as possible.\r\n        // Normally, the execution of speechSynthesis.getVoices will return at the first time an empty array.\r\n        if (window.hasOwnProperty('speechSynthesis')) {\r\n            speechSynthesis.getVoices();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't speak without the Speech Synthesis API.\");\r\n        }\r\n        // This instance of webkitSpeechRecognition is the one used by Artyom.\r\n        if (window.hasOwnProperty('webkitSpeechRecognition')) {\r\n            this.ArtyomWebkitSpeechRecognition = new window.webkitSpeechRecognition();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't recognize voice without the Speech Recognition API.\");\r\n        }\r\n        this.ArtyomProperties = {\r\n            lang: 'en-GB',\r\n            recognizing: false,\r\n            continuous: false,\r\n            speed: 1,\r\n            volume: 1,\r\n            listen: false,\r\n            mode: \"normal\",\r\n            debug: false,\r\n            helpers: {\r\n                redirectRecognizedTextOutput: null,\r\n                remoteProcessorHandler: null,\r\n                lastSay: null,\r\n                fatalityPromiseCallback: null\r\n            },\r\n            executionKeyword: null,\r\n            obeyKeyword: null,\r\n            speaking: false,\r\n            obeying: true,\r\n            soundex: false,\r\n            name: null\r\n        };\r\n        this.ArtyomGarbageCollection = [];\r\n        this.ArtyomFlags = {\r\n            restartRecognition: false\r\n        };\r\n        this.ArtyomGlobalEvents = {\r\n            ERROR: \"ERROR\",\r\n            SPEECH_SYNTHESIS_START: \"SPEECH_SYNTHESIS_START\",\r\n            SPEECH_SYNTHESIS_END: \"SPEECH_SYNTHESIS_END\",\r\n            TEXT_RECOGNIZED: \"TEXT_RECOGNIZED\",\r\n            COMMAND_RECOGNITION_START: \"COMMAND_RECOGNITION_START\",\r\n            COMMAND_RECOGNITION_END: \"COMMAND_RECOGNITION_END\",\r\n            COMMAND_MATCHED: \"COMMAND_MATCHED\",\r\n            NOT_COMMAND_MATCHED: \"NOT_COMMAND_MATCHED\"\r\n        };\r\n        this.Device = {\r\n            isMobile: false,\r\n            isChrome: true\r\n        };\r\n        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\r\n            this.Device.isMobile = true;\r\n        }\r\n        if (navigator.userAgent.indexOf(\"Chrome\") == -1) {\r\n            this.Device.isChrome = false;\r\n        }\r\n        /**\r\n         * The default voice of Artyom in the Desktop. In mobile, you will need to initialize (or force the language)\r\n         * with a language code in order to find an available voice in the device, otherwise it will use the native voice.\r\n         */\r\n        this.ArtyomVoice = {\r\n            default: false,\r\n            lang: \"en-GB\",\r\n            localService: false,\r\n            name: \"Google UK English Male\",\r\n            voiceURI: \"Google UK English Male\"\r\n        };\r\n    }\r\n    /**\r\n     * Add dinamically commands to artyom using\r\n     * You can even add commands while artyom is active.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/addcommands\r\n     * @since 0.6\r\n     * @param {Object | Array[Objects]} param\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.addCommands = function (param) {\r\n        var _this = this;\r\n        var processCommand = function (command) {\r\n            if (command.hasOwnProperty(\"indexes\")) {\r\n                _this.ArtyomCommands.push(command);\r\n            }\r\n            else {\r\n                console.error(\"The given command doesn't provide any index to execute.\");\r\n            }\r\n        };\r\n        if (param instanceof Array) {\r\n            for (var i = 0; i < param.length; i++) {\r\n                processCommand(param[i]);\r\n            }\r\n        }\r\n        else {\r\n            processCommand(param);\r\n        }\r\n        return true;\r\n    };\r\n    ;\r\n    /**\r\n     * The SpeechSynthesisUtterance objects are stored in the artyom_garbage_collector variable\r\n     * to prevent the wrong behaviour of artyom.say.\r\n     * Use this method to clear all spoken SpeechSynthesisUtterance unused objects.\r\n     *\r\n     * @returns {Array<any>}\r\n     */\r\n    Artyom.prototype.clearGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection = [];\r\n    };\r\n    ;\r\n    /**\r\n     * Displays a message in the console if the artyom propery DEBUG is set to true.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/debug\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.debug = function (message, type) {\r\n        var preMessage = \"[v\" + this.getVersion() + \"] Artyom.js\";\r\n        if (this.ArtyomProperties.debug === true) {\r\n            switch (type) {\r\n                case \"error\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #C12127; color: black;', 'color:black;');\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #4285F4; color: #FFFFFF', 'color:black;');\r\n                    break;\r\n                default:\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #005454; color: #BFF8F8', 'color:black;');\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Artyom have it's own diagnostics.\r\n     * Run this function in order to detect why artyom is not initialized.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/detecterrors\r\n     * @param {type} callback\r\n     * @returns {}\r\n     */\r\n    Artyom.prototype.detectErrors = function () {\r\n        var _this = this;\r\n        if ((window.location.protocol) == \"file:\") {\r\n            var message = \"Error: running Artyom directly from a file. The APIs require a different communication protocol like HTTP or HTTPS\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_localfile\",\r\n                message: message\r\n            };\r\n        }\r\n        if (!_this.Device.isChrome) {\r\n            var message = \"Error: the Speech Recognition and Speech Synthesis APIs require the Google Chrome Browser to work.\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_browser_unsupported\",\r\n                message: message\r\n            };\r\n        }\r\n        if (window.location.protocol != \"https:\") {\r\n            console.warn(\"Warning: artyom is being executed using the '\" + window.location.protocol + \"' protocol. The continuous mode requires a secure protocol (HTTPS)\");\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Removes all the added commands of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/emptycommands\r\n     * @since 0.6\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.emptyCommands = function () {\r\n        return this.ArtyomCommands = [];\r\n    };\r\n    /**\r\n     * Returns an object with data of the matched element\r\n     *\r\n     * @private\r\n     * @param {string} comando\r\n     * @returns {MatchedCommand}\r\n     */\r\n    Artyom.prototype.execute = function (voz) {\r\n        var _this = this;\r\n        if (!voz) {\r\n            console.warn(\"Internal error: Execution of empty command\");\r\n            return;\r\n        }\r\n        // If artyom was initialized with a name, verify that the name begins with it to allow the execution of commands.\r\n        if (_this.ArtyomProperties.name) {\r\n            if (voz.indexOf(_this.ArtyomProperties.name) != 0) {\r\n                _this.debug(\"Artyom requires with a name \\\"\" + _this.ArtyomProperties.name + \"\\\" but the name wasn't spoken.\", \"warn\");\r\n                return;\r\n            }\r\n            // Remove name from voice command\r\n            voz = voz.substr(_this.ArtyomProperties.name.length);\r\n        }\r\n        _this.debug(\">> \" + voz);\r\n        /** @3\r\n         * Artyom needs time to think that\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            var wildy = \"\";\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (!instruction.smart) {\r\n                    continue; //Jump if is not smart command\r\n                }\r\n                // Process RegExp\r\n                if (opcion instanceof RegExp) {\r\n                    // If RegExp matches \r\n                    if (opcion.test(voz)) {\r\n                        _this.debug(\">> REGEX \" + opcion.toString() + \" MATCHED AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                    }\r\n                    // Otherwise just wildcards\r\n                }\r\n                else {\r\n                    if (opcion.indexOf(\"*\") != -1) {\r\n                        ///LOGIC HERE\r\n                        var grupo = opcion.split(\"*\");\r\n                        if (grupo.length > 2) {\r\n                            console.warn(\"Artyom found a smart command with \" + (grupo.length - 1) + \" wildcards. Artyom only support 1 wildcard for each command. Sorry\");\r\n                            continue;\r\n                        }\r\n                        //START SMART COMMAND\r\n                        var before = grupo[0];\r\n                        var later = grupo[1];\r\n                        // Wildcard in the end\r\n                        if ((later == \"\") || (later == \" \")) {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                wildy = voz.replace(before, '');\r\n                                wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '');\r\n                                encontrado = parseInt(c.toString());\r\n                            }\r\n                        }\r\n                        else {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                if ((voz.indexOf(later) != -1) || ((voz.toLowerCase()).indexOf(later.toLowerCase()) != -1)) {\r\n                                    wildy = voz.replace(before, '').replace(later, '');\r\n                                    wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '').replace(later.toLowerCase(), '');\r\n                                    wildy = (wildy.toLowerCase()).replace(later.toLowerCase(), '');\r\n                                    encontrado = parseInt(c.toString());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.warn(\"Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *\");\r\n                    }\r\n                }\r\n                if ((encontrado >= 0)) {\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction,\r\n                    wildcard: {\r\n                        item: wildy,\r\n                        full: voz\r\n                    }\r\n                };\r\n                return response;\r\n            }\r\n        } //End @3\r\n        /** @1\r\n         * Search for IDENTICAL matches in the commands if nothing matches\r\n         * start with a index match in commands\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with identical commands\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                if ((voz === opcion)) {\r\n                    _this.debug(\">> MATCHED FULL EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if ((voz.toLowerCase() === opcion.toLowerCase())) {\r\n                    _this.debug(\">> MATCHED OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End @1\r\n        /**\r\n         * Step 3 Commands recognition.\r\n         * If the command is not smart, and any of the commands match exactly then try to find\r\n         * a command in all the quote.\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with index\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                var opcion = opciones[c];\r\n                if ((voz.indexOf(opcion) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if (((voz.toLowerCase()).indexOf(opcion.toLowerCase()) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End Step 3\r\n        /**\r\n         * If the soundex options is enabled, proceed to process the commands in case that any of the previous\r\n         * ways of processing (exact, lowercase and command in quote) didn't match anything.\r\n         * Based on the soundex algorithm match a command if the spoken text is similar to any of the artyom commands.\r\n         * Example :\r\n         * If you have a command with \"Open Wallmart\" and \"Open Willmar\" is recognized, the open wallmart command will be triggered.\r\n         * soundex(\"Open Wallmart\") == soundex(\"Open Willmar\") <= true\r\n         *\r\n         */\r\n        if (_this.ArtyomProperties.soundex) {\r\n            for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n                var instruction = _this.ArtyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                for (var c = 0; c < opciones.length; c++) {\r\n                    var opcion = opciones[c];\r\n                    if (instruction.smart) {\r\n                        continue; //Jump wildcard commands\r\n                    }\r\n                    if (_this.soundex(voz) == _this.soundex(opcion)) {\r\n                        _this.debug(\">> Matched Soundex command '\" + opcion + \"' AGAINST '\" + voz + \"' with index \" + c, \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                        var response = {\r\n                            index: encontrado,\r\n                            instruction: instruction\r\n                        };\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        _this.triggerEvent(_this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        return;\r\n    };\r\n    /**\r\n     * Force artyom to stop listen even if is in continuos mode.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/fatality\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.fatality = function () {\r\n        var _this = this;\r\n        //fatalityPromiseCallback\r\n        return new Promise(function (resolve, reject) {\r\n            // Expose the fatality promise callback to the helpers object of Artyom.\r\n            // The promise isn't resolved here itself but in the onend callback of\r\n            // the speechRecognition instance of artyom\r\n            _this.ArtyomProperties.helpers.fatalityPromiseCallback = resolve;\r\n            try {\r\n                // If config is continuous mode, deactivate anyway.\r\n                _this.ArtyomFlags.restartRecognition = false;\r\n                _this.ArtyomWebkitSpeechRecognition.stop();\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Returns an array with all the available commands for artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getavailablecommands\r\n     * @readonly\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getAvailableCommands = function () {\r\n        return this.ArtyomCommands;\r\n    };\r\n    /**\r\n     * Artyom can return inmediately the voices available in your browser.\r\n     *\r\n     * @readonly\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getvoices\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getVoices = function () {\r\n        return window.speechSynthesis.getVoices();\r\n    };\r\n    /**\r\n     * Verify if the browser supports speechSynthesis.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/speechsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.speechSupported = function () {\r\n        return 'speechSynthesis' in window;\r\n    };\r\n    /**\r\n     * Verify if the browser supports webkitSpeechRecognition.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/recognizingsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.recognizingSupported = function () {\r\n        return 'webkitSpeechRecognition' in window;\r\n    };\r\n    /**\r\n     * Stops the actual and pendings messages that artyom have to say.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/shutup\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.shutUp = function () {\r\n        if ('speechSynthesis' in window) {\r\n            do {\r\n                window.speechSynthesis.cancel();\r\n            } while (window.speechSynthesis.pending === true);\r\n        }\r\n        this.ArtyomProperties.speaking = false;\r\n        this.clearGarbageCollection();\r\n    };\r\n    /**\r\n     * Returns an object with the actual properties of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getproperties\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.getProperties = function () {\r\n        return this.ArtyomProperties;\r\n    };\r\n    /**\r\n     * Returns the code language of artyom according to initialize function.\r\n     * if initialize not used returns english GB.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getlanguage\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getLanguage = function () {\r\n        return this.ArtyomProperties.lang;\r\n    };\r\n    /**\r\n     * Retrieves the used version of Artyom.js\r\n     *\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getVersion = function () {\r\n        return '1.0.6';\r\n    };\r\n    /**\r\n     * Artyom awaits for orders when this function\r\n     * is executed.\r\n     *\r\n     * If artyom gets a first parameter the instance will be stopped.\r\n     *\r\n     * @private\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.hey = function (resolve, reject) {\r\n        var start_timestamp;\r\n        var artyom_is_allowed;\r\n        var _this = this;\r\n        /**\r\n         * On mobile devices the recognized text is always thrown twice.\r\n         * By setting the following configuration, fixes the issue\r\n         */\r\n        if (this.Device.isMobile) {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = false;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = false;\r\n            this.ArtyomWebkitSpeechRecognition.maxAlternatives = 1;\r\n        }\r\n        else {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = true;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = true;\r\n        }\r\n        this.ArtyomWebkitSpeechRecognition.lang = this.ArtyomProperties.lang;\r\n        this.ArtyomWebkitSpeechRecognition.onstart = function () {\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.ArtyomProperties.recognizing = true;\r\n            artyom_is_allowed = true;\r\n            resolve();\r\n        };\r\n        /**\r\n         * Handle all artyom posible exceptions\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        this.ArtyomWebkitSpeechRecognition.onerror = function (event) {\r\n            // Reject promise on initialization\r\n            reject(event.error);\r\n            // Dispath error globally (artyom.when)\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                code: event.error\r\n            });\r\n            if (event.error == 'audio-capture') {\r\n                artyom_is_allowed = false;\r\n            }\r\n            if (event.error == 'not-allowed') {\r\n                artyom_is_allowed = false;\r\n                if (event.timeStamp - start_timestamp < 100) {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-blocked\",\r\n                        message: \"Artyom needs the permision of the microphone, is blocked.\"\r\n                    });\r\n                }\r\n                else {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-denied\",\r\n                        message: \"Artyom needs the permision of the microphone, is denied\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Check if continuous mode is active and restart the recognition.\r\n         * Throw events too.\r\n         *\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onend = function () {\r\n            if (_this.ArtyomFlags.restartRecognition === true) {\r\n                if (artyom_is_allowed === true) {\r\n                    _this.ArtyomWebkitSpeechRecognition.start();\r\n                    _this.debug(\"Continuous mode enabled, restarting\", \"info\");\r\n                }\r\n                else {\r\n                    console.error(\"Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener\");\r\n                }\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                    code: \"continuous_mode_enabled\",\r\n                    message: \"OnEnd event reached with continuous mode\"\r\n                });\r\n            }\r\n            else {\r\n                // If the fatality promise callback was set, invoke it\r\n                if (_this.ArtyomProperties.helpers.fatalityPromiseCallback) {\r\n                    // As the speech recognition doesn't finish really, wait 500ms\r\n                    // to trigger the real fatality callback\r\n                    setTimeout(function () {\r\n                        _this.ArtyomProperties.helpers.fatalityPromiseCallback();\r\n                    }, 500);\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                        code: \"continuous_mode_disabled\",\r\n                        message: \"OnEnd event reached without continuous mode\"\r\n                    });\r\n                }\r\n            }\r\n            _this.ArtyomProperties.recognizing = false;\r\n        };\r\n        /**\r\n         * Declare the processor dinamycally according to the mode of artyom\r\n         * to increase the performance.\r\n         *\r\n         * @type {Function}\r\n         * @return\r\n         */\r\n        var onResultProcessor;\r\n        // Process the recognition in normal mode\r\n        if (_this.ArtyomProperties.mode == \"normal\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process in normal mode.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        // Redirect the output of the text if necessary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in normal mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            // Execute the command if smart\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                // Execute a normal command\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if (typeof (_this.ArtyomProperties.executionKeyword) === \"string\") {\r\n                            if (identificated.indexOf(_this.ArtyomProperties.executionKeyword) != -1) {\r\n                                var comando = _this.execute(identificated.replace(_this.ArtyomProperties.executionKeyword, '').trim());\r\n                                if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                                    _this.debug(\"<< Executing command ordered by ExecutionKeyword >>\", 'info');\r\n                                    _this.ArtyomWebkitSpeechRecognition.stop();\r\n                                    _this.ArtyomProperties.recognizing = false;\r\n                                    //Executing Command Action\r\n                                    if (comando.wildcard) {\r\n                                        comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                    }\r\n                                    else {\r\n                                        comando.instruction.action(comando.index);\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        _this.debug(\"Normal mode : \" + identificated);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in quick mode\r\n        if (_this.ArtyomProperties.mode == \"quick\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (!event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    _this.debug(\"Quick mode : \" + identificated);\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in remote mode\r\n        if (_this.ArtyomProperties.mode == \"remote\") {\r\n            onResultProcessor = function (event) {\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                if (typeof (_this.ArtyomProperties.helpers.remoteProcessorHandler) !== \"function\") {\r\n                    return _this.debug(\"The remoteProcessorService is undefined.\", \"warn\");\r\n                }\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    _this.ArtyomProperties.helpers.remoteProcessorHandler({\r\n                        text: identificated,\r\n                        isFinal: event.results[i].isFinal\r\n                    });\r\n                }\r\n            };\r\n        }\r\n        /**\r\n         * Process the recognition event with the previously\r\n         * declared processor function.\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onresult = function (event) {\r\n            if (_this.ArtyomProperties.obeying) {\r\n                onResultProcessor(event);\r\n            }\r\n            else {\r\n                // Handle obeyKeyword if exists and artyom is not obeying\r\n                if (!_this.ArtyomProperties.obeyKeyword) {\r\n                    return;\r\n                }\r\n                var temporal = \"\";\r\n                var interim = \"\";\r\n                for (var i = 0; i < event.results.length; ++i) {\r\n                    if (event.results[i].isFinal) {\r\n                        temporal += event.results[i][0].transcript;\r\n                    }\r\n                    else {\r\n                        interim += event.results[i][0].transcript;\r\n                    }\r\n                }\r\n                _this.debug(\"Artyom is not obeying\", \"warn\");\r\n                // If the obeyKeyword is found in the recognized text\r\n                // enable command recognition again\r\n                if (((interim).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) || (temporal).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) {\r\n                    _this.ArtyomProperties.obeying = true;\r\n                }\r\n            }\r\n        };\r\n        if (_this.ArtyomProperties.recognizing) {\r\n            _this.ArtyomWebkitSpeechRecognition.stop();\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n        }\r\n        else {\r\n            try {\r\n                _this.ArtyomWebkitSpeechRecognition.start();\r\n            }\r\n            catch (e) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                    code: \"recognition_overlap\",\r\n                    message: \"A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser\"\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set up artyom for the application.\r\n     *\r\n     * This function will set the default language used by artyom\r\n     * or notice the user if artyom is not supported in the actual\r\n     * browser\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/initialize\r\n     * @param {Object} config\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.initialize = function (config) {\r\n        var _this = this;\r\n        if (typeof (config) !== \"object\") {\r\n            return Promise.reject(\"You must give the configuration for start artyom properly.\");\r\n        }\r\n        if (config.hasOwnProperty(\"lang\")) {\r\n            _this.ArtyomVoice = _this.getVoice(config.lang);\r\n            _this.ArtyomProperties.lang = config.lang;\r\n        }\r\n        if (config.hasOwnProperty(\"continuous\")) {\r\n            if (config.continuous) {\r\n                this.ArtyomProperties.continuous = true;\r\n                this.ArtyomFlags.restartRecognition = true;\r\n            }\r\n            else {\r\n                this.ArtyomProperties.continuous = false;\r\n                this.ArtyomFlags.restartRecognition = false;\r\n            }\r\n        }\r\n        if (config.hasOwnProperty(\"speed\")) {\r\n            this.ArtyomProperties.speed = config.speed;\r\n        }\r\n        if (config.hasOwnProperty(\"soundex\")) {\r\n            this.ArtyomProperties.soundex = config.soundex;\r\n        }\r\n        if (config.hasOwnProperty(\"executionKeyword\")) {\r\n            this.ArtyomProperties.executionKeyword = config.executionKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"obeyKeyword\")) {\r\n            this.ArtyomProperties.obeyKeyword = config.obeyKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"volume\")) {\r\n            this.ArtyomProperties.volume = config.volume;\r\n        }\r\n        if (config.hasOwnProperty(\"listen\")) {\r\n            this.ArtyomProperties.listen = config.listen;\r\n        }\r\n        if (config.hasOwnProperty(\"name\")) {\r\n            this.ArtyomProperties.name = config.name;\r\n        }\r\n        if (config.hasOwnProperty(\"debug\")) {\r\n            this.ArtyomProperties.debug = config.debug;\r\n        }\r\n        else {\r\n            console.warn(\"The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.\");\r\n        }\r\n        if (config.mode) {\r\n            this.ArtyomProperties.mode = config.mode;\r\n        }\r\n        if (this.ArtyomProperties.listen === true) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this.hey(resolve, reject);\r\n            });\r\n        }\r\n        return Promise.resolve(true);\r\n    };\r\n    /**\r\n     * Add commands like an artisan. If you use artyom for simple tasks\r\n     * then probably you don't like to write a lot to achieve it.\r\n     *\r\n     * Use the artisan syntax to write less, but with the same accuracy.\r\n     *\r\n     * @disclaimer Not a promise-based implementation, just syntax.\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.on = function (indexes, smart) {\r\n        var _this = this;\r\n        return {\r\n            then: function (action) {\r\n                var command = {\r\n                    indexes: indexes,\r\n                    action: action\r\n                };\r\n                if (smart) {\r\n                    command.smart = true;\r\n                }\r\n                _this.addCommands(command);\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Generates an artyom event with the designed name\r\n     *\r\n     * @param {type} name\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.triggerEvent = function (name, param) {\r\n        var event = new CustomEvent(name, {\r\n            'detail': param\r\n        });\r\n        document.dispatchEvent(event);\r\n        return event;\r\n    };\r\n    /**\r\n     * Repeats the last sentence that artyom said.\r\n     * Useful in noisy environments.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/repeatlastsay\r\n     * @param {Boolean} returnObject If set to true, an object with the text and the timestamp when was executed will be returned.\r\n     * @returns {Object}\r\n     */\r\n    Artyom.prototype.repeatLastSay = function (returnObject) {\r\n        var last = this.ArtyomProperties.helpers.lastSay;\r\n        if (returnObject) {\r\n            return last;\r\n        }\r\n        else {\r\n            if (last != null) {\r\n                this.say(last.text);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Create a listener when an artyom action is called.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/when\r\n     * @param {type} event\r\n     * @param {type} action\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.when = function (event, action) {\r\n        return document.addEventListener(event, function (e) {\r\n            action(e[\"detail\"]);\r\n        }, false);\r\n    };\r\n    /**\r\n     * Process the recognized text if artyom is active in remote mode.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.remoteProcessorService = function (action) {\r\n        this.ArtyomProperties.helpers.remoteProcessorHandler = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Verify if there's a voice available for a language using its language code identifier.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    Artyom.prototype.voiceAvailable = function (languageCode) {\r\n        return typeof (this.getVoice(languageCode)) !== \"undefined\";\r\n    };\r\n    /**\r\n     * A boolean to check if artyom is obeying commands or not.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isObeying = function () {\r\n        return this.ArtyomProperties.obeying;\r\n    };\r\n    /**\r\n     * Allow artyom to obey commands again.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.obey = function () {\r\n        return this.ArtyomProperties.obeying = true;\r\n    };\r\n    /**\r\n     * Pause the processing of commands. Artyom still listening in the background and it can be resumed after a couple of seconds.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.dontObey = function () {\r\n        return this.ArtyomProperties.obeying = false;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the speechSynthesis status\r\n     * if artyom is speaking, will return true.\r\n     *\r\n     * Note: This is not a feature of speechSynthesis, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the speechSynthesis\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if speechSynthesis is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isSpeaking = function () {\r\n        return this.ArtyomProperties.speaking;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the SpeechRecognition status\r\n     * if artyom is listening, will return true.\r\n     *\r\n     * Note: This is not a feature of SpeechRecognition, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the SpeechRecognition\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if SpeechRecognition is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isRecognizing = function () {\r\n        return this.ArtyomProperties.recognizing;\r\n    };\r\n    /**\r\n     * This function will return the webkitSpeechRecognition object used by artyom\r\n     * retrieve it only to debug on it or get some values, do not make changes directly\r\n     *\r\n     * @readonly\r\n     * @since 0.9.2\r\n     * @summary Retrieve the native webkitSpeechRecognition object\r\n     * @returns {Object webkitSpeechRecognition}\r\n     */\r\n    Artyom.prototype.getNativeApi = function () {\r\n        return this.ArtyomWebkitSpeechRecognition;\r\n    };\r\n    /**\r\n     * Returns the SpeechSynthesisUtterance garbageobjects.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection;\r\n    };\r\n    /**\r\n     *  Retrieve a single voice of the browser by it's language code.\r\n     *  It will return the first voice available for the language on every device.\r\n     *\r\n     * @param languageCode\r\n     */\r\n    Artyom.prototype.getVoice = function (languageCode) {\r\n        var voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[languageCode];\r\n        if (!voiceIdentifiersArray) {\r\n            console.warn(\"The providen language \" + languageCode + \" isn't available, using English Great britain as default\");\r\n            voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[\"en-GB\"];\r\n        }\r\n        var voice = undefined;\r\n        var voices = speechSynthesis.getVoices();\r\n        var voicesLength = voiceIdentifiersArray.length;\r\n        var _loop_1 = function (i) {\r\n            var foundVoice = voices.filter(function (voice) {\r\n                return ((voice.name == voiceIdentifiersArray[i]) || (voice.lang == voiceIdentifiersArray[i]));\r\n            })[0];\r\n            if (foundVoice) {\r\n                voice = foundVoice;\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0; i < voicesLength; i++) {\r\n            var state_1 = _loop_1(i);\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n        return voice;\r\n    };\r\n    /**\r\n     * Artyom provide an easy way to create a\r\n     * dictation for your user.\r\n     *\r\n     * Just create an instance and start and stop when you want\r\n     *\r\n     * @returns Object | newDictation\r\n     */\r\n    Artyom.prototype.newDictation = function (settings) {\r\n        var _this = this;\r\n        if (!_this.recognizingSupported()) {\r\n            console.error(\"SpeechRecognition is not supported in this browser\");\r\n            return false;\r\n        }\r\n        var dictado = new window.webkitSpeechRecognition();\r\n        dictado.continuous = true;\r\n        dictado.interimResults = true;\r\n        dictado.lang = _this.ArtyomProperties.lang;\r\n        dictado.onresult = function (event) {\r\n            var temporal = \"\";\r\n            var interim = \"\";\r\n            for (var i = 0; i < event.results.length; ++i) {\r\n                if (event.results[i].isFinal) {\r\n                    temporal += event.results[i][0].transcript;\r\n                }\r\n                else {\r\n                    interim += event.results[i][0].transcript;\r\n                }\r\n            }\r\n            if (settings.onResult) {\r\n                settings.onResult(interim, temporal);\r\n            }\r\n        };\r\n        return new function () {\r\n            var dictation = dictado;\r\n            var flagStartCallback = true;\r\n            var flagRestart = false;\r\n            this.onError = null;\r\n            this.start = function () {\r\n                if (settings.continuous === true) {\r\n                    flagRestart = true;\r\n                }\r\n                dictation.onstart = function () {\r\n                    if (typeof (settings.onStart) === \"function\") {\r\n                        if (flagStartCallback === true) {\r\n                            settings.onStart();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.onend = function () {\r\n                    if (flagRestart === true) {\r\n                        flagStartCallback = false;\r\n                        dictation.start();\r\n                    }\r\n                    else {\r\n                        flagStartCallback = true;\r\n                        if (typeof (settings.onEnd) === \"function\") {\r\n                            settings.onEnd();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.start();\r\n            };\r\n            this.stop = function () {\r\n                flagRestart = false;\r\n                dictation.stop();\r\n            };\r\n            if (typeof (settings.onError) === \"function\") {\r\n                dictation.onerror = settings.onError;\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * A voice prompt will be executed.\r\n     *\r\n     * @param {type} config\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.newPrompt = function (config) {\r\n        if (typeof (config) !== \"object\") {\r\n            console.error(\"Expected the prompt configuration.\");\r\n        }\r\n        var copyActualCommands = Object.assign([], this.ArtyomCommands);\r\n        var _this = this;\r\n        this.emptyCommands();\r\n        var promptCommand = {\r\n            description: \"Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes\",\r\n            indexes: config.options,\r\n            action: function (i, wildcard) {\r\n                _this.ArtyomCommands = copyActualCommands;\r\n                var toExe = config.onMatch(i, wildcard);\r\n                if (typeof (toExe) !== \"function\") {\r\n                    console.error(\"onMatch function expects a returning function to be executed\");\r\n                    return;\r\n                }\r\n                toExe();\r\n            }\r\n        };\r\n        if (config.smart) {\r\n            promptCommand.smart = true;\r\n        }\r\n        this.addCommands(promptCommand);\r\n        if (typeof (config.beforePrompt) !== \"undefined\") {\r\n            config.beforePrompt();\r\n        }\r\n        var callbacks = {\r\n            onStart: function () {\r\n                if (typeof (config.onStartPrompt) !== \"undefined\") {\r\n                    config.onStartPrompt();\r\n                }\r\n            },\r\n            onEnd: function () {\r\n                if (typeof (config.onEndPrompt) !== \"undefined\") {\r\n                    config.onEndPrompt();\r\n                }\r\n            }\r\n        };\r\n        this.say(config.question, callbacks);\r\n    };\r\n    /**\r\n     * Says a random quote and returns it's object\r\n     *\r\n     * @param {type} data\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.sayRandom = function (data) {\r\n        if (data instanceof Array) {\r\n            var index = Math.floor(Math.random() * data.length);\r\n            this.say(data[index]);\r\n            return {\r\n                text: data[index],\r\n                index: index\r\n            };\r\n        }\r\n        else {\r\n            console.error(\"Random quotes must be in an array !\");\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Shortcut method to enable the artyom debug on the fly.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.setDebug = function (status) {\r\n        if (status) {\r\n            return this.ArtyomProperties.debug = true;\r\n        }\r\n        else {\r\n            return this.ArtyomProperties.debug = false;\r\n        }\r\n    };\r\n    /**\r\n     * Simulate a voice command via JS\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/simulateinstruction\r\n     * @param {type} sentence\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.simulateInstruction = function (sentence) {\r\n        var _this = this;\r\n        if ((!sentence) || (typeof (sentence) !== \"string\")) {\r\n            console.warn(\"Cannot execute a non string command\");\r\n            return false;\r\n        }\r\n        var foundCommand = _this.execute(sentence); //Command founded object\r\n        if (typeof (foundCommand) === \"object\") {\r\n            if (foundCommand.instruction) {\r\n                if (foundCommand.instruction.smart) {\r\n                    _this.debug('Smart command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index, foundCommand.wildcard.item, foundCommand.wildcard.full);\r\n                }\r\n                else {\r\n                    _this.debug('Command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index); //Execute Normal command\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"No command founded trying with \" + sentence);\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Javascript implementation of the soundex algorithm.\r\n     * @see https://gist.github.com/shawndumas/1262659\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.soundex = function (s) {\r\n        var a = s.toLowerCase().split('');\r\n        var f = a.shift();\r\n        var r = '';\r\n        var codes = { a: \"\", e: \"\", i: \"\", o: \"\", u: \"\", b: 1, f: 1, p: 1, v: 1, c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2, d: 3, t: 3, l: 4, m: 5, n: 5, r: 6 };\r\n        r = f + a\r\n            .map(function (v, i, a) {\r\n            return codes[v];\r\n        })\r\n            .filter(function (v, i, a) {\r\n            return ((i === 0) ? v !== codes[f] : v !== a[i - 1]);\r\n        })\r\n            .join('');\r\n        return (r + '000').slice(0, 4).toUpperCase();\r\n    };\r\n    /**\r\n     * Splits a string into an array of strings with a limited size (chunk_length).\r\n     *\r\n     * @param {String} input text to split into chunks\r\n     * @param {Integer} chunk_length limit of characters in every chunk\r\n     */\r\n    Artyom.prototype.splitStringByChunks = function (input, chunk_length) {\r\n        input = input || \"\";\r\n        chunk_length = chunk_length || 100;\r\n        var curr = chunk_length;\r\n        var prev = 0;\r\n        var output = [];\r\n        while (input[curr]) {\r\n            if (input[curr++] == ' ') {\r\n                output.push(input.substring(prev, curr));\r\n                prev = curr;\r\n                curr += chunk_length;\r\n            }\r\n        }\r\n        output.push(input.substr(prev));\r\n        return output;\r\n    };\r\n    /**\r\n     * Allows to retrieve the recognized spoken text of artyom\r\n     * and do something with it everytime something is recognized\r\n     *\r\n     * @param {String} action\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.redirectRecognizedTextOutput = function (action) {\r\n        if (typeof (action) != \"function\") {\r\n            console.warn(\"Expected function to handle the recognized text ...\");\r\n            return false;\r\n        }\r\n        this.ArtyomProperties.helpers.redirectRecognizedTextOutput = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Restarts artyom with the initial configuration.\r\n     *\r\n     * @param configuration\r\n     */\r\n    Artyom.prototype.restart = function () {\r\n        var _this = this;\r\n        var _copyInit = _this.ArtyomProperties;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.fatality().then(function () {\r\n                _this.initialize(_copyInit).then(resolve, reject);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Talks a text according to the given parameters.\r\n     *\r\n     * @private This function is only to be used internally.\r\n     * @param {String} text Text to be spoken\r\n     * @param {Int} actualChunk Number of chunk of the\r\n     * @param {Int} totalChunks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.talk = function (text, actualChunk, totalChunks, callbacks) {\r\n        var _this = this;\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        msg.volume = this.ArtyomProperties.volume;\r\n        msg.rate = this.ArtyomProperties.speed;\r\n        // Select the voice according to the selected\r\n        var availableVoice = _this.getVoice(_this.ArtyomProperties.lang);\r\n        if (callbacks) {\r\n            // If the language to speak has been forced, use it\r\n            if (callbacks.hasOwnProperty(\"lang\")) {\r\n                availableVoice = _this.getVoice(callbacks.lang);\r\n            }\r\n        }\r\n        // If is a mobile device, provide only the language code in the lang property i.e \"es_ES\"\r\n        if (this.Device.isMobile) {\r\n            // Try to set the voice only if exists, otherwise don't use anything to use the native voice\r\n            if (availableVoice) {\r\n                msg.lang = availableVoice.lang;\r\n            }\r\n            // If browser provide the entire object\r\n        }\r\n        else {\r\n            msg.voice = availableVoice;\r\n        }\r\n        // If is first text chunk (onStart)\r\n        if (actualChunk == 1) {\r\n            msg.addEventListener('start', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = true;\r\n                // Trigger the onSpeechSynthesisStart event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                // Trigger the onStart callback if exists\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onStart) == \"function\") {\r\n                        callbacks.onStart.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // If is final text chunk (onEnd)\r\n        if ((actualChunk) >= totalChunks) {\r\n            msg.addEventListener('end', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = false;\r\n                // Trigger the onSpeechSynthesisEnd event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                // Trigger the onEnd callback if exists.\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onEnd) == \"function\") {\r\n                        callbacks.onEnd.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Notice how many chunks were processed for the given text.\r\n        this.debug((actualChunk) + \" text chunk processed succesfully out of \" + totalChunks);\r\n        // Important : Save the SpeechSynthesisUtterance object in memory, otherwise it will get lost\r\n        this.ArtyomGarbageCollection.push(msg);\r\n        window.speechSynthesis.speak(msg);\r\n    };\r\n    /**\r\n     * Process the given text into chunks and execute the private function talk\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/say\r\n     * @param {String} message Text to be spoken\r\n     * @param {Object} callbacks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.say = function (message, callbacks) {\r\n        var artyom_say_max_chunk_length = 115;\r\n        var _this = this;\r\n        var definitive = [];\r\n        if (this.speechSupported()) {\r\n            if (typeof (message) != 'string') {\r\n                return console.warn(\"Artyom expects a string to speak \" + typeof message + \" given\");\r\n            }\r\n            if (!message.length) {\r\n                return console.warn(\"Cannot speak empty string\");\r\n            }\r\n            // If the providen text is long, proceed to split it\r\n            if (message.length > artyom_say_max_chunk_length) {\r\n                // Split the given text by pause reading characters [\",\",\":\",\";\",\". \"] to provide a natural reading feeling.\r\n                var naturalReading = message.split(/,|:|\\. |;/);\r\n                naturalReading.forEach(function (chunk, index) {\r\n                    // If the sentence is too long and could block the API, split it to prevent any errors.\r\n                    if (chunk.length > artyom_say_max_chunk_length) {\r\n                        // Process the providen string into strings (withing an array) of maximum aprox. 115 characters to prevent any error with the API.\r\n                        var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);\r\n                        // Add items of the processed sentence into the definitive chunk.\r\n                        definitive.push.apply(definitive, temp_processed);\r\n                    }\r\n                    else {\r\n                        // Otherwise just add the sentence to being spoken.\r\n                        definitive.push(chunk);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                definitive.push(message);\r\n            }\r\n            // Clean any empty item in array\r\n            definitive = definitive.filter(function (e) { return e; });\r\n            // Finally proceed to talk the chunks and assign the callbacks.\r\n            definitive.forEach(function (chunk, index) {\r\n                var numberOfChunk = (index + 1);\r\n                if (chunk) {\r\n                    _this.talk(chunk, numberOfChunk, definitive.length, callbacks);\r\n                }\r\n            });\r\n            // Save the spoken text into the lastSay object of artyom\r\n            _this.ArtyomProperties.helpers.lastSay = {\r\n                text: message,\r\n                date: new Date()\r\n            };\r\n        }\r\n    };\r\n    return Artyom;\r\n}());\r\nexports.default = Artyom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}